from abc import ABCMeta, abstractmethod
from logging import Logger
from os.path import join
from pathlib import Path
from re import match, VERBOSE
from typing import Any, Union
from urllib.parse import urlparse


__all__ = ('SitemapConfig', 'CHANGE_FREQ', 'ConfType', 'DirPathType', 'EXTENSION_ROOT',
           'Location', 'LastModified', 'ChangeFrequency', 'Priority', 'validate_tags')


ConfType = Union[type, 'SitemapConfig']
DirPathType = Union[str, tuple, list]

CHANGE_FREQ = 'always', 'hourly', 'daily', 'weekly', 'monthly', 'yearly', 'never'
EXTENSION_ROOT = Path(__file__).parent.absolute()


class Parameter(metaclass=ABCMeta):
    """A descriptor to check configuration parameters values"""

    __slots__ = ('storage', )

    assert_msg = None

    def __init__(self, default: Any = None):
        self.storage = default

    @classmethod
    @abstractmethod
    def validate(cls, value):
        pass

    def __get__(self, instance, owner):
        return self.storage

    def __set__(self, instance, value):
        self.storage = self.validate(value)


class Location(Parameter):
    """A descriptor to check loc parameter values"""

    __slots__ = ()

    assert_msg = 'A path is required in location parameter'

    @classmethod
    def validate(cls, value) -> str:
        if value is not None:
            assert isinstance(value, str), cls.assert_msg
            assert urlparse(value).path, cls.assert_msg
        return value


class LastModified(Parameter):
    """A descriptor to check lastmod parameter values according to https://www.w3.org/TR/NOTE-datetime"""

    __slots__ = ()

    assert_msg = ' Last modified should be of the format: YYYY-MM-DD or YYYY-MM-DDThh-mm-ss'

    @classmethod
    def validate(cls, value) -> str:
        if value is not None:
            assert isinstance(value, str), cls.assert_msg
            pattern = r"""
            (?P<date>
                (?P<year>20[0-9]{2})-
                (?P<month>0[0-9]|1[0-2])-
                (?P<day>[0-2][0-9]|3[0-1])
            )
            (T(?P<time>
                (?P<hours>[0-1][0-9]|2[0-3]):
                (?P<minutes>[0-5][0-9]):
                (?P<seconds>[0-5][0-9])
            ))?
            """
            assert match(pattern, value, VERBOSE), cls.assert_msg
        return value


class ChangeFrequency(Parameter):
    """A descriptor to check change frequency parameter values"""

    __slots__ = ()

    assert_msg = 'Change frequency should be one of the following: ' + ', '.join(CHANGE_FREQ)

    @classmethod
    def validate(cls, value) -> str:
        if value is not None:
            assert isinstance(value, str), cls.assert_msg
            assert value.casefold() in CHANGE_FREQ, cls.assert_msg
        return value


class Priority(Parameter):
    """A descriptor to check priority parameter values"""

    __slots__ = ()

    assert_msg = 'Priority should be a float between 0.0 and 1.0'

    @classmethod
    def validate(cls, value) -> Union[int, float]:
        if value is not None:
            assert isinstance(value, (int, float)), cls.assert_msg
            assert 0.0 < value <= 1.0, cls.assert_msg
        return value


class SitemapConfig(dict):
    """A class to set configurations

    DEBUG - if True sets up logging to DEBUG level
    LOGGER - an instance of logging.Logger, creates child of app.logger if not set
    IGNORED - a set of strings which ignored URLs contain
    STATIC_FOLDER - a str or a collection of folders to make path where to put a STATIC sitemap.xml
    TEMPLATE_FOLDER - where to put a template for a dynamic sitemap
        folders examples:
            STATIC_FOLDER = os.path.join('app', 'static')
            TEMPLATE_FOLDER = ['app', 'templates']
    INDEX_CHANGES - str, a change frequency of the index page
    CONTENT_CHANGES - str, a change frequency of pages generated by models
    ALTER_CHANGES - str, a change frequency of other pages with attributes not defined by add_elem
    INDEX_PRIORITY - float, a priority of the index page
    CONTENT_PRIORITY - float, a priority of pages generated by models
    ALTER_PRIORITY - float, a priority of other pages
    CACHE_PERIOD - float, hours; if set, will use already generated data
    """
    # Sitemap object attributes
    DEBUG: bool = False
    LOGGER: Logger = None
    IGNORED: set = {'/admin', '/static', }
    SOURCE_FILE: str = join(EXTENSION_ROOT, 'templates', 'jinja2.xml')
    CACHE_PERIOD: Union[int, float] = None

    INDEX_CHANGES: str = ChangeFrequency(default=None)
    CONTENT_CHANGES: str = ChangeFrequency(default=None)
    ALTER_CHANGES: str = ChangeFrequency(default=None)

    INDEX_PRIORITY: float = Priority(default=1.0)
    CONTENT_PRIORITY: float = Priority(default=None)
    ALTER_PRIORITY: float = Priority(default=None)

    # Application object attributes
    APP_ROOT: DirPathType = ''
    STATIC_FOLDER: DirPathType = None
    TEMPLATE_FOLDER: DirPathType = None

    def from_object(self, obj: ConfType):
        """Updates values from the given object

        :param obj: a class with the same attributes as this one or it's instance
        """
        if isinstance(obj, type) or isinstance(obj, type(self)):
            for key in dir(obj):
                if key.isupper():
                    self[key] = getattr(obj, key)
        else:
            raise NotImplementedError('This type of object is not supported yet')

    def __set__(self, instance, value):
        raise PermissionError(
            'You could not change configuration this way. Use "from_object" method or set specific attribute'
        )

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __getitem__(self, item):
        return getattr(self, item)

    def __repr__(self):
        return f'<Sitemap configurations object at {id(self)}>'


def validate_tags(loc=None, lastmod=None, changefreq=None, priority=None) -> dict:
    """Validates sitemap's XML tags values"""
    result = {}

    if loc:
        result['loc'] = Location.validate(loc)

    if lastmod:
        result['lastmod'] = LastModified.validate(lastmod)

    if changefreq:
        result['changefreq'] = ChangeFrequency.validate(changefreq)

    if priority:
        result['priority'] = Priority.validate(priority)

    return result
