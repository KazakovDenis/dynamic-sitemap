from pathlib import Path
from typing import Union

from . import helpers
from .exceptions import SitemapValidationError
from .validators import *


__all__ = ('SitemapConfig', 'ConfType', 'DirPathType', 'EXTENSION_ROOT')

ConfType = Union[type, 'SitemapConfig']
DirPathType = Union[str, tuple, list]
EXTENSION_ROOT = Path(__file__).parent.absolute()


class SitemapConfig(dict):
    """A class to set configurations

    DEBUG - if True sets up logging to DEBUG level
    PATH - a path to write sitemap.xml
    BASE_URL - a base URL such as 'http://site.com'
    IGNORED - a set of strings which ignored URLs contain
    SOURCE_FILE - str, a path to the template to be copied into templates directory
    CACHE_PERIOD - float, hours; if set, will use already generated data
    TIMEZONE - str, the site's local time zone, one of pytz.all_timezones

    INDEX_CHANGES - str, a change frequency of the index page
    CONTENT_CHANGES - str, a change frequency of pages generated by models
    ALTER_CHANGES - str, a change frequency of other pages with attributes not defined by add_elem

    INDEX_PRIORITY - float, a priority of the index page
    CONTENT_PRIORITY - float, a priority of pages generated by models
    ALTER_PRIORITY - float, a priority of other pages
    """
    DEBUG: bool = False
    FILENAME: str = ''
    BASE_URL: str = ''
    IGNORED: set = {'/sitemap.xml', '/admin', '/static'}
    CACHE_PERIOD: Union[int, float] = 0
    TIMEZONE: str = Timezone(default=None)

    INDEX_CHANGES: str = ChangeFrequency(default=None)
    CONTENT_CHANGES: str = ChangeFrequency(default=None)
    ALTER_CHANGES: str = ChangeFrequency(default=None)

    INDEX_PRIORITY: float = Priority(default=1.0)
    CONTENT_PRIORITY: float = Priority(default=None)
    ALTER_PRIORITY: float = Priority(default=None)

    def from_object(self, obj: ConfType):
        """Updates values from the given object

        :param obj: a class with the same attributes as this one or it's instance
        """
        if obj is None:
            return

        self._validate(obj)

        for key in dir(obj):
            if key.isupper():
                self[key] = getattr(obj, key)

    def _validate(self, obj):
        if not isinstance(obj, (type, type(self))):
            raise SitemapValidationError('This type of object is not supported yet')

        filename = getattr(obj, 'FILENAME', None)
        if filename:
            assert Path(filename).parent.exists()

        base_url = getattr(obj, 'BASE_URL', None)
        if base_url:
            assert helpers.check_url(base_url)

        cache_period = getattr(obj, 'CACHE_PERIOD', None)
        if cache_period:
            msg = 'CACHE_PERIOD should be a float greater than 0.0'
            assert isinstance(obj.CACHE_PERIOD, (int, float)), msg
            assert obj.CACHE_PERIOD > 0.0, msg

    def __set__(self, instance, value):
        raise SitemapValidationError(
            'You could not change configuration this way. Use "from_object" method or set specific attribute'
        )

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __getitem__(self, item):
        return getattr(self, item)

    def __repr__(self):
        return f'<Sitemap configuration of "{self.BASE_URL}">'
